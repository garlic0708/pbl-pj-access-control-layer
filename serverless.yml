service: pbl-pj-access-control-layer

provider:
  name: aws
  runtime: nodejs8.10

  # you can overwrite defaults here
  #  stage: dev
  region: us-west-2
  websocketsApiName: pbl-pj-access-control-ws-api
  websocketsApiRouteSelectionExpression: $request.body.action

  vpc:
    securityGroupIds:
      - sg-b8c2cac2
    subnetIds:
      - subnet-c688fe9d
      - subnet-dfaf0fb9
      - subnet-7acf9052
      - subnet-1927e151

custom:
  authorizer:
    name: pbl-pj-access-control-layer
    type: request
    identitySource: 'method.request.querystring.session_type'
  redisUrl:
    dev: testcluster.7o3wd3.ng.0001.usw2.cache.amazonaws.com:6379
    local: localhost

package:
  exclude:
    - '*/node_modules'
    - '*/tests'


functions:
  lambda:
    handler: lambda/delegator.delegator
    #    role: arn:aws:iam::696961721203:role/lambda_vpc_role
    events:
      - websocket:
          route: $connect
          authorizer: ${self:custom.authorizer}
      - websocket: $default
      - websocket: $disconnect
      - websocket: getMSId
      - http:
          #          path: ${file(lambda/delegator.js):delegator.registerNewClientPath}
          path: registerNewClient
          method: post
          authorizer: ${self:custom.authorizer}
      - http:
          #          path: ${file(lambda/delegator.js):delegator.listCreatedClientsPath}
          path: listCreatedClients
          method: get
          authorizer: ${self:custom.authorizer}
    environment:
      REDIS_URL: ${self:custom.redisUrl.${opt:stage}}
      MS_CLIENT: 13fhbh31qgpmspg5369sr70cpr